"""Add relationships for friend requests

Revision ID: ccbf9deab20b
Revises: 
Create Date: 2025-05-16 20:01:02.695268

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ccbf9deab20b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_badge_links')
    op.drop_index('ix_badges_name', table_name='badges')
    op.drop_table('badges')
    op.drop_table('user_daily_challenges')
    op.drop_index('ix_daily_challenges_description', table_name='daily_challenges')
    op.drop_table('daily_challenges')
    op.create_foreign_key(None, 'friend_links', 'users', ['friend_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'friend_links', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'friend_requests', 'users', ['receiver_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'friend_requests', 'users', ['sender_id'], ['id'], ondelete='CASCADE')
    op.alter_column('leaderboards', 'teamwork_score',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_foreign_key(None, 'leaderboards', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'task_assignees', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'task_collaborators', 'users', ['invited_by_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'task_collaborators', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'tasks', 'users', ['created_by_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'user_kpi_metric_history', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'user_kpi_summary', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'user_levels', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'user_streaks', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'workroom_live_sessions', 'users', ['screen_sharer_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'workroom_member_links', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'workroom_performance_metrics', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'workrooms', 'users', ['created_by'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'workrooms', type_='foreignkey')
    op.drop_constraint(None, 'workroom_performance_metrics', type_='foreignkey')
    op.drop_constraint(None, 'workroom_member_links', type_='foreignkey')
    op.drop_constraint(None, 'workroom_live_sessions', type_='foreignkey')
    op.drop_constraint(None, 'user_streaks', type_='foreignkey')
    op.drop_constraint(None, 'user_levels', type_='foreignkey')
    op.drop_constraint(None, 'user_kpi_summary', type_='foreignkey')
    op.drop_constraint(None, 'user_kpi_metric_history', type_='foreignkey')
    op.drop_constraint(None, 'tasks', type_='foreignkey')
    op.drop_constraint(None, 'task_collaborators', type_='foreignkey')
    op.drop_constraint(None, 'task_collaborators', type_='foreignkey')
    op.drop_constraint(None, 'task_assignees', type_='foreignkey')
    op.drop_constraint(None, 'leaderboards', type_='foreignkey')
    op.alter_column('leaderboards', 'teamwork_score',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_constraint(None, 'friend_requests', type_='foreignkey')
    op.drop_constraint(None, 'friend_requests', type_='foreignkey')
    op.drop_constraint(None, 'friend_links', type_='foreignkey')
    op.drop_constraint(None, 'friend_links', type_='foreignkey')
    op.create_table('daily_challenges',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('points', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='daily_challenges_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_daily_challenges_description', 'daily_challenges', ['description'], unique=False)
    op.create_table('user_daily_challenges',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('daily_challenge_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('accepted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('completed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['daily_challenge_id'], ['daily_challenges.id'], name='user_daily_challenges_daily_challenge_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_daily_challenges_pkey')
    )
    op.create_table('badges',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='badges_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_badges_name', 'badges', ['name'], unique=False)
    op.create_table('user_badge_links',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('badge_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['badge_id'], ['badges.id'], name='user_badge_links_badge_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'badge_id', name='user_badge_links_pkey')
    )
    # ### end Alembic commands ###
